apply plugin: 'com.android.application'

/* gets the version name from the latest Git tag */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.2"

    defaultConfig {
        applicationId "org.torproject.torservices"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 2010
        versionName getVersionName()
        archivesBaseName = "TorServices-$versionName"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        /*
          The Android Testing Support Library collects analytics to continuously improve the testing
          experience. More specifically, it uploads a hash of the package name of the application
          under test for each invocation. If you do not wish to upload this data, you can opt-out by
          passing the following argument to the test runner: disableAnalytics "true".
         */
        testInstrumentationRunnerArguments disableAnalytics: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix "-debug"
        }
    }

    // ensure reproducible builds https://f-droid.org/docs/Reproducible_Builds/#png-crushcrunch
    aaptOptions {
        cruncherEnabled = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /*
     These META-INF files are spammy, unneeded, and trigger big
     warnings in `apksigner verify`.  Sadly, this does not work for
     META-INF/com/android/build/gradle/app-metadata.properties, which
     is hacked in using some special technique that packagingOptions
     cannot affect.
     */
    packagingOptions {
        exclude 'META-INF/*.version'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError true

        htmlReport true
        xmlReport false
        textReport false

        lintConfig file("lint.xml")
    }

    splits {
        abi {
            // Enables building multiple APKs per ABI using: ./gradlew assembleRelease -Pabi-splits
            enable project.hasProperty('abi-splits')

            // By default all ABIs are included, so use reset() and specify a chosen list.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

	    // Specifies a list of ABIs that Gradle should create APKs for.
	    if (project.hasProperty('abi-splits')) {
		def abiSplits = project.getProperty('abi-splits')
		println("project.getProperty('abi-splits') -> " + project.getProperty('abi-splits'))
		if (abiSplits instanceof Boolean || abiSplits == 'true' || abiSplits == '') {
		    universalApk true
		    abiSplits = "x86,x86_64,armeabi-v7a,arm64-v8a"
		    println "Building universal APK"
		} else {
		    universalApk false
		    abiSplits = project.getProperty('abi-splits')
		}
		println "Building ABI splits for: " + abiSplits
		include abiSplits.split(',')
	    }
        }
    }
}

// Assign per-ABI versionCode bump based on potential upgrade paths:
// * all devices can upgrade from the universal APK, so its 0
// * x86_64 devices can upgrade from x86, and arm64-v8a from armeabi-v7a
ext.abiCodes = ["x86":1, "x86_64":2, "armeabi-v7a":3, "arm64-v8a":4]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
    // Assigns a different version code for each output APK other than the universal APK.
    variant.outputs.each { output ->
	def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
	// Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
	// the following code does not override the version code for universal APKs.
	// However, because we want universal APKs to have the lowest version code,
	// this outcome is desirable.
	if (baseAbiVersionCode != null) {
	    output.versionCodeOverride = variant.versionCode + baseAbiVersionCode
	}
    }
}

dependencies {
    api 'info.guardianproject:jtorctl:0.4.5.7'
    implementation 'info.guardianproject:tor-android:0.4.7.14'
    implementation 'androidx.core:core:1.3.2'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'commons-io:commons-io:2.6'
    androidTestImplementation 'commons-net:commons-net:3.6'
}
